// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model company {
  id           Int             @id @default(autoincrement())
  nameFa       String
  nationalId   String
  description  String?
  img          String?
  nameEn       String?
  country      String?
  mainAddress  String?
  website      String?
  province     String?
  postalCode   String?
  city         String?
  registerationDate DateTime?
  registerationNumber String?
  email        String?
  contacts     contact[]
  persons      companyPerson[]           // all history entries for this company
  sites        site[]
  brandOwnerDrugs companyDrug[] @relation("BrandOwnerCompany")
  supplierDrugs   companyDrug[] @relation("SupplierCompany")
  producerDrugs   companyDrug[] @relation("ProducerCompany")
  request126s     request126[]
  documents       companyDocument[]       // attached documents

  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model companyPerson {
  id            Int       @id @default(autoincrement())
  person        person    @relation(fields: [personId], references: [id])
  personId      Int
  company       company   @relation(fields: [companyId], references: [id])
  companyId     Int
  licenseNumber String?
  licenseDate   String?
  endedAt       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([personId])
  @@index([companyId])
}

model person {
  id                 Int             @id @default(autoincrement())
  username           String          @unique
  passwordHash       String
  name               String?
  familyName         String?
  nezamCode          String?
  companies          companyPerson[]  // history entries
  request126Acted    request126History[] @relation("Actor")
  request126Assigned request126History[] @relation("Assignee")
  role               String
  phone              String?
  email              String?
  nationalId         String?
  birthCity          String?
  birthDate          DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model contact {
  id  Int @id @default(autoincrement())
  company company @relation(fields: [companyId], references: [id])
  companyId Int
  value String
  isPrimary  Boolean  @default(false)
  title String?
  cityCode  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model site {
  id  Int @id @default(autoincrement())
  company company @relation(fields: [companyId], references: [id])
  lines line[]
  machines machine[]
  companyId  Int
  country String?
  city  String?
  address String?
  gpsLat  Float?
  gpsLng  Float?
  isPrimary Boolean @default(false)
  GLN String?
  province  String?
  name  String?
  documents siteDocument[]              // attached documents
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model dosage {
  id  Int @id @default(autoincrement())
  emaCode String
  category  String?
  labelEn String?
  labelFa String?
  lineDosage lineDosage[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model lineDosage {
  id Int @id @default(autoincrement())
  dosage dosage @relation(fields: [dosageId], references: [id])
  dosageId Int
  line line @relation(fields: [lineId], references: [id])
  lineId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model line {
  id  Int @id @default(autoincrement())
  site  site @relation(fields: [siteId], references: [id])
  siteId  Int
  nameEn  String?
  isActive  Boolean @default(true)
  capacity  Int?
  OEB Int?
  nameFa  String?
  isSterile  Boolean?
  actual Int?
  startFrom String?
  opensDate DateTime?
  lineDosage lineDosage[]
  machines   machine[]
  request126s     request126[]
  documents       lineDocument[]          // attached documents
  companyDrugs   companyDrug[] @relation("LineCompany")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model machineType {
  id        Int @id @default(autoincrement())
  nameEn    String
  nameFa    String
  scope     String
  machines  machine[]
}

model machine {
  id                Int @id @default(autoincrement())
  siteId            Int?
  site              site? @relation(fields: [siteId], references: [id])
  lineId            Int?
  line              line? @relation(fields: [lineId], references: [id])
  machineTypeId     Int
  machineType       machineType @relation(fields: [machineTypeId], references: [id])
  country           String?
  brand             String?
  model             String?
  manufactureDate   DateTime?
  installationDate  DateTime?
  nominalCapacity   Int?
  actualCapacity    Int?
  DQ                Boolean?
  IQ                Boolean?
  OQ                Boolean?
  PQ                Boolean?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model document {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?   // Description of the document
  fileName      String    // Original file name
  fileKey       String    @unique // S3 object key/path
  fileSize      Int       // File size in bytes
  mimeType      String    // MIME type (e.g., 'application/pdf', 'image/jpeg')
  uploadedBy    Int?      // Optional: user who uploaded the file
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations to bridge tables
  siteDocument       siteDocument?
  lineDocument       lineDocument?
  companyDocument    companyDocument?
  request126Document request126Document?

  @@index([fileKey])
  @@index([uploadedBy])
  @@index([mimeType])
}

model siteDocument {
  id          Int       @id @default(autoincrement())
  site        site      @relation(fields: [siteId], references: [id])
  siteId      Int
  document    document  @relation(fields: [documentId], references: [id])
  documentId  Int       @unique
}

model lineDocument {
  id          Int       @id @default(autoincrement())
  line        line      @relation(fields: [lineId], references: [id])
  lineId      Int
  document    document  @relation(fields: [documentId], references: [id])
  documentId  Int       @unique
}

model companyDocument {
  id          Int       @id @default(autoincrement())
  company     company   @relation(fields: [companyId], references: [id])
  companyId   Int
  document    document  @relation(fields: [documentId], references: [id])
  documentId  Int       @unique
}

model request126Document {
  id          Int        @id @default(autoincrement())
  request     request126 @relation(fields: [requestId], references: [id])
  requestId   Int
  document    document   @relation(fields: [documentId], references: [id])
  documentId  Int        @unique

  @@index([requestId])
  @@index([documentId])
}

model drug {
  id                Int @id @default(autoincrement())
  drugIndexName     String
  genericName       String
  genericCode       String
  ATC               String?
  companyDrugs      companyDrug[]
  request126s       request126[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model companyDrug {
  id            Int       @id @default(autoincrement())
  drug          drug    @relation(fields: [drugId], references: [id])
  drugId        Int
  brandOwner    company   @relation("BrandOwnerCompany", fields: [brandOwnerId], references: [id])
  brandOwnerId  Int
  IRC           String
  GTIN          String?
  brandNameEn   String
  brandNameFa   String?
  packageCount  Float?
  isBulk        Boolean?
  isTemp        Boolean?
  status        String
  supplier      company  @relation("SupplierCompany", fields: [supplierId], references: [id])
  supplierId    Int
  producer      company? @relation("ProducerCompany", fields: [producerId], references: [id])
  producerId    Int?
  line          line?    @relation("LineCompany", fields: [lineId], references: [id])
  lineId        Int?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([drugId])
  @@index([brandOwnerId])
  @@index([lineId])
  @@index([supplierId])
}

model request126 {
  id               Int     @id @default(autoincrement())
  type             String
  companyId        Int
  company          company @relation(fields: [companyId],   references: [id])
  lineId           Int
  line             line    @relation(fields: [lineId],      references: [id])
  drugId           Int
  drug             drug    @relation(fields: [drugId],      references: [id])
  drugOEB_declared Int
  drugOEL_declared Float

  history       request126History[]
  documents     request126Document[]      // attached documents

  closedAt      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model request126History {
  id            Int        @id @default(autoincrement())
  requestId     Int
  request       request126 @relation(fields: [requestId], references: [id])
  actorId       Int
  actor         person     @relation("Actor", fields: [actorId],   references: [id])
  action        String
  fromStatus    String
  toStatus      String
  toAssigneeId  Int
  toAssignee    person     @relation("Assignee", fields: [toAssigneeId], references: [id])
  message       String?
  endedAt       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}