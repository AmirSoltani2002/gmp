generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model company {
  id                 Int               @id @default(autoincrement())
  nameFa             String
  nationalId         String
  description        String?
  img                String?
  nameEn             String?
  country            String?
  mainAddress        String?
  website            String?
  province           String?
  postalCode         String?
  city               String?
  registrationDate   DateTime?
  registrationNumber String?
  email              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  contact            String?
  documents          companyDocument[]
  brandOwnerDrugs    companyDrug[]     @relation("BrandOwnerCompany")
  supplierDrugs      companyDrug[]     @relation("SupplierCompany")
  persons            companyPerson[]
  request126s        request126[]
  sites              site[]
}

model companyPerson {
  id            Int       @id @default(autoincrement())
  personId      Int
  companyId     Int
  licenseNumber String?
  licenseDate   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  endedAt       DateTime?
  company       company   @relation(fields: [companyId], references: [id])
  person        person    @relation(fields: [personId], references: [id])

  @@index([personId])
  @@index([companyId])
}

model person {
  id                 Int                 @id @default(autoincrement())
  username           String              @unique
  passwordHash       String
  name               String?
  familyName         String?
  nezamCode          String?
  role               String
  phone              String?
  email              String?
  nationalId         String?
  birthCity          String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  birthDate          DateTime?
  birthProvince      String?
  companies          companyPerson[]
  request126Acted    request126History[] @relation("Actor")
  request126Assigned request126History[] @relation("Assignee")
}

model site {
  id        Int            @id @default(autoincrement())
  companyId Int
  country   String?
  city      String?
  address   String?
  gpsLat    Float?
  gpsLng    Float?
  isPrimary Boolean        @default(false)
  GLN       String?
  province  String?
  name      String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  lines     line[]
  machines  machine[]
  company   company        @relation(fields: [companyId], references: [id])
  documents siteDocument[]
}

model dosage {
  id         Int          @id @default(autoincrement())
  emaCode    String
  category   String?
  labelEn    String?
  labelFa    String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  lineDosage lineDosage[]
}

model lineDosage {
  id        Int      @id @default(autoincrement())
  dosageId  Int
  lineId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dosage    dosage   @relation(fields: [dosageId], references: [id])
  line      line     @relation(fields: [lineId], references: [id])
}

model line {
  id           Int            @id @default(autoincrement())
  siteId       Int
  nameEn       String?
  isActive     Boolean        @default(true)
  capacity     Int?
  OEB          Int?
  nameFa       String?
  isSterile    Boolean?
  actual       Int?
  startFrom    String?
  opensDate    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  companyDrugs companyDrug[]  @relation("LineCompany")
  site         site           @relation(fields: [siteId], references: [id])
  documents    lineDocument[]
  lineDosage   lineDosage[]
  machines     machine[]
  request126s  request126[]
}

model machineType {
  id       Int       @id @default(autoincrement())
  nameEn   String
  nameFa   String
  scope    String
  machines machine[]
}

model machine {
  id               Int         @id @default(autoincrement())
  siteId           Int?
  lineId           Int?
  machineTypeId    Int
  country          String?
  brand            String?
  model            String?
  manufactureDate  DateTime?
  installationDate DateTime?
  nominalCapacity  Int?
  actualCapacity   Int?
  DQ               Boolean?
  IQ               Boolean?
  OQ               Boolean?
  PQ               Boolean?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  line             line?       @relation(fields: [lineId], references: [id])
  machineType      machineType @relation(fields: [machineTypeId], references: [id])
  site             site?       @relation(fields: [siteId], references: [id])
}

model document {
  id                 Int                 @id @default(autoincrement())
  title              String
  description        String?
  fileName           String
  fileKey            String              @unique
  fileSize           Int
  mimeType           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  companyId          Int?
  companyDocument    companyDocument?
  lineDocument       lineDocument?
  request126Document request126Document?
  siteDocument       siteDocument?

  @@index([fileKey])
  @@index([companyId])
  @@index([mimeType])
}

model siteDocument {
  id         Int      @id @default(autoincrement())
  siteId     Int
  documentId Int      @unique
  document   document @relation(fields: [documentId], references: [id])
  site       site     @relation(fields: [siteId], references: [id])
}

model lineDocument {
  id         Int      @id @default(autoincrement())
  lineId     Int
  documentId Int      @unique
  document   document @relation(fields: [documentId], references: [id])
  line       line     @relation(fields: [lineId], references: [id])
}

model companyDocument {
  id         Int      @id @default(autoincrement())
  companyId  Int
  documentId Int      @unique
  company    company  @relation(fields: [companyId], references: [id])
  document   document @relation(fields: [documentId], references: [id])
}

model request126Document {
  id         Int        @id @default(autoincrement())
  requestId  Int
  documentId Int        @unique
  document   document   @relation(fields: [documentId], references: [id])
  request    request126 @relation(fields: [requestId], references: [id])

  @@index([requestId])
  @@index([documentId])
}

model drug {
  id            Int           @id @default(autoincrement())
  drugIndexName String
  genericName   String
  genericCode   String
  ATC           String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  companyDrugs  companyDrug[]
  request126s   request126[]
}

model companyDrug {
  id           Int      @id @default(autoincrement())
  drugId       Int
  brandOwnerId Int
  IRC          String
  brandNameEn  String
  brandNameFa  String?
  packageCount Float?
  isBulk       Boolean?
  isTemp       Boolean?
  status       String
  supplierId   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  GTIN         String?
  lineId       Int?
  brandOwner   company  @relation("BrandOwnerCompany", fields: [brandOwnerId], references: [id])
  drug         drug     @relation(fields: [drugId], references: [id])
  line         line?    @relation("LineCompany", fields: [lineId], references: [id])
  supplier     company  @relation("SupplierCompany", fields: [supplierId], references: [id])

  @@index([drugId])
  @@index([brandOwnerId])
  @@index([lineId])
  @@index([supplierId])
}

model request126 {
  id               Int                  @id @default(autoincrement())
  type             String
  companyId        Int
  lineId           Int
  drugId           Int
  drugOEB_declared Int
  drugOEL_declared Float
  closedAt         DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  company          company              @relation(fields: [companyId], references: [id])
  drug             drug                 @relation(fields: [drugId], references: [id])
  line             line                 @relation(fields: [lineId], references: [id])
  documents        request126Document[]
  history          request126History[]
}

model request126History {
  id           Int        @id @default(autoincrement())
  requestId    Int
  actorId      Int
  action       String
  fromStatus   String
  toStatus     String
  toAssigneeId Int
  message      String?
  endedAt      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  actor        person     @relation("Actor", fields: [actorId], references: [id])
  request      request126 @relation(fields: [requestId], references: [id])
  toAssignee   person     @relation("Assignee", fields: [toAssigneeId], references: [id])
}

model quickReport {
  id                 String         @id @default(uuid())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  drugBrandName      String
  companyName        String
  batchNumber        String
  description        String
  phoneNumber        String?
  email              String?
  patientName        String?
  patientAge         Int?
  patientGender      PatientGender?
  drugGenericName    String?
  dosageForm         String?
  dosageStrength     String?
  gtin               String?
  uid                String?
  productionDate     DateTime?
  expirationDate     DateTime?
  purchaseLocation   String?
  storageDescription String?
  defectTypes        String?
  defectDetails      String?
  productImageKey    String?        @unique
  metadata           Json?
  ip                 String?
  userAgent          String?
  consumptionDate    DateTime?

  @@map("quick_reports")
}

enum PatientGender {
  male
  female
}
