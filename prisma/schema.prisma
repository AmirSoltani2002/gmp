// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model company {
  id           Int             @id @default(autoincrement())
  nameFa       String
  nationalId   String
  description  String?
  img          String?
  nameEn       String?
  country      String?
  mainAddress  String?
  website      String?
  province     String?
  postalCode   String?
  city         String?
  registerationDate DateTime?
  registerationNumber String?
  email        String?
  contacts     contact[]
  persons      companyPerson[]           // all history entries for this company
  sites        site[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model companyPerson {
  id            Int       @id @default(autoincrement())
  person        person    @relation(fields: [personId], references: [id])
  personId      Int
  company       company   @relation(fields: [companyId], references: [id])
  companyId     Int
  licenseNumber String?
  licenseDate   String?
  endedAt       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([personId])
  @@index([companyId])
}

model person {
  id                Int             @id @default(autoincrement())
  username          String          @unique
  passwordHash      String
  name              String?
  familyName        String?
  nezamCode         String?
  companies         companyPerson[]  // history entries
  role              String
  phone             String?
  email             String?
  nationalId        String?
  birthCity         String?
  birthDate         DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model contact {
  id  Int @id @default(autoincrement())
  company company @relation(fields: [companyId], references: [id])
  companyId Int
  value String
  isPrimary  Boolean  @default(false)
  title String?
  cityCode  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model site {
  id  Int @id @default(autoincrement())
  company company @relation(fields: [companyId], references: [id])
  lines line[]
  companyId  Int
  country String?
  city  String?
  address String?
  gpsLat  Float?
  gpsLng  Float?
  isPrimary Boolean @default(false)
  GLN String?
  province  String?
  name  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model dosage {
  id  Int @id @default(autoincrement())
  emaCode String
  category  String?
  labelEn String?
  labelFa String?
  lineDosage lineDosage[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model lineDosage {
  id Int @id @default(autoincrement())
  dosage dosage @relation(fields: [dosageId], references: [id])
  dosageId Int
  line line @relation(fields: [lineId], references: [id])
  lineId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model line {
  id  Int @id @default(autoincrement())
  site  site @relation(fields: [siteId], references: [id])
  siteId  Int
  nameEn  String?
  isActive  Boolean @default(true)
  capacity  Int?
  OEB Int?
  nameFa  String?
  isSterile  Boolean?
  actual Int?
  startFrom String?
  opensDate DateTime?
  lineDosage lineDosage[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model machineType {
  id      Int @id @default(autoincrement())
  nameEn  String
  nameFa  String
  scope   String
}

